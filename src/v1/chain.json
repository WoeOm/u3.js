{
  "get_sourcerate": {
    "brief": "Return net rate and cpu rate",
    "params": {
      "account_name": "name"
    },
    "results": {
      "net_rate": "uint64",
      "cpu_rate": "uint64"
    }
  },
  "get_currency_balance": {
    "params": {
      "code": "name",
      "account": "name",
      "symbol": "optional<string>"
    },
    "results": "asset[]"
  },
  "get_currency_stats": {
    "params": {
      "code": "name",
      "symbol": "string"
    },
    "results": {
      "supply": "asset",
      "max_supply": "asset",
      "issuer": "account_name"
    }
  },
  "get_producer_schedule": {
    "brief": "",
    "params": {},
    "results": {
      "vector": "active",
      "vector": "pending",
      "vector": "proposed"
    }
  },
  "get_scheduled_transactions": {
    "brief": "",
    "params": {
      "json": {
        "type": "bool",
        "default": false
      },
      "lower_bound": {
        "type": "string",
        "doc": "timestamp OR transaction ID"
      },
      "limit": {
        "type": "uint32",
        "default": "50"
      }
    },
    "results": {
      "vector": "transactions",
      "more": {
        "type": "string",
        "doc": "fill lower_bound with this to fetch next set of transactions"
      }
    }
  },
  "get_chain_info": {
    "brief": "Return general network information.",
    "params": null,
    "results": {
      "server_version": "string",
      "head_block_num": "uint32",
      "last_irreversible_block_num": "uint32",
      "last_irreversible_block_id": "block_id",
      "head_block_id": "block_id",
      "head_block_time": "time_point_sec",
      "head_block_producer": "account_name",
      "virtual_block_cpu_limit": "uint64",
      "virtual_block_net_limit": "uint64",
      "block_cpu_limit": "uint64",
      "block_net_limit": "uint64"
    }
  },
  "get_block_info": {
    "brief": "Fetch a block from the blockchain.",
    "params": {
      "block_num_or_id": "string"
    },
    "results": "variant",
    "errors": {
      "unknown block": null
    }
  },
  "get_block_header_state": {
    "brief": "Fetch the minimum state necessary to validate transaction headers.",
    "params": {
      "block_num_or_id": "string"
    },
    "results": "string",
    "errors": {
      "block_id_type_exception": "Invalid block ID",
      "unknown_block_exception": "Could not find reversible block"
    }
  },
  "get_account_info": {
    "brief": "Fetch a blockchain account",
    "params": {
      "account_name": "name"
    },
    "results": {
      "account_name": "name",
      "privileged": "bool",
      "last_code_update": "time_point",
      "created": "time_point",
      "ram_quota": "int64",
      "net_weight": "int64",
      "cpu_weight": "int64",
      "net_limit": "int64",
      "cpu_limit": "int64",
      "ram_usage": "int64",
      "permissions": "vector<permission>",
      "total_resources": "variant",
      "delegated_bandwidth": "variant",
      "voter_info": "variant"
    }
  },
  "get_contract": {
    "brief": "Fetch smart contract code",
    "params": {
      "account_name": "name",
      "code_as_wasm": {
        "type": "bool",
        "default": false
      }
    },
    "results": {
      "account_name": "name",
      "wast": "string",
      "wasm": "string",
      "code_hash": "sha256",
      "abi": "optional<abi_def>"
    }
  },
  "get_abi": {
    "params": {
      "account_name": "name"
    },
    "results": {
      "account_name": "name",
      "abi": "abi_def?"
    }
  },
  "get_raw_code_and_abi": {
    "params": {
      "account_name": "name"
    },
    "results": {
      "account_name": "name",
      "wasm": "bytes",
      "abi": "abi_def?"
    }
  },
  "get_table_records": {
    "brief": "Fetch smart contract data from an account.",
    "params": {
      "json": {
        "type": "bool",
        "default": false
      },
      "code": "name",
      "scope": "string",
      "table": "name",
      "table_key": "string",
      "lower_bound": {
        "type": "string",
        "default": "0"
      },
      "upper_bound": {
        "type": "string",
        "default": "-1"
      },
      "limit": {
        "type": "uint32",
        "default": "10"
      },
      "key_type": {
        "type": "string",
        "doc": "The key type of --index, primary only supports (i64), all others support (i64, i128, i256, float64, float128). Special type 'name' indicates an account name."
      },
      "index_position": {
        "type": "string",
        "doc": "1 - primary (first), 2 - secondary index (in order defined by multi_index), 3 - third index, etc"
      }
    },
    "results": {
      "rows": {
        "type": "vector",
        "doc": "One row per item, either encoded as hex String or JSON object"
      },
      "more": {
        "type": "bool",
        "doc": "True if last element in data is not the end and sizeof data() < limit"
      }
    }
  },
  "abi_json2bin": {
    "brief": "Manually serialize json into binary hex.  The binayargs is usually stored in Action.data.",
    "params": {
      "code": "name",
      "action": "name",
      "args": "bytes"
    },
    "results": {
      "binargs": "bytes"
    }
  },
  "abi_bin2json": {
    "brief": "Convert bin hex back into Abi json definition.",
    "params": {
      "code": "name",
      "action": "name",
      "binargs": "bytes"
    },
    "results": {
      "args": "bytes",
      "required_scope": "name[]",
      "required_auth": "name[]"
    }
  },
  "get_required_keys": {
    "params": {
      "transaction": "transaction",
      "available_keys": "set[public_key]"
    },
    "results": "Set[public_key]"
  },
  "push_block": {
    "brief": "Append a block to the chain database.",
    "params": {
      "block": "signed_block"
    },
    "results": null
  },
  "push_tx": {
    "brief": "Attempts to push the transaction into the pending queue.",
    "params": {
      "signed_transaction": "signed_transaction"
    },
    "results": {
      "transaction_id": "fixed_bytes32",
      "processed": "bytes"
    }
  },
  "push_txs": {
    "brief": "Attempts to push transactions into the pending queue.",
    "params": {
      "signed_transaction[]": "signed_transaction"
    },
    "results": "vector[push_transaction.results]"
  },
  "register_event": {
    "brief": "subscribe to ultrain chain event.",
    "params": {
      "account": "name",
      "post_url": "string"
    },
    "results": ""
  },
  "unregister_event": {
    "brief": "unsubscribe to ultrain chain event.",
    "params": {
      "account": "name",
      "post_url": "string"
    },
    "results": ""
  }
}
