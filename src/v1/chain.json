{
  "get_subchain_block_num": {
    "brief": "Return committee of subchain",
    "params": {
      "chain_name": "account_name"
    },
    "results": "asset[]"
  },
  "get_subchain_committee": {
    "brief": "Return committee of subchain",
    "params": {
      "chain_name": "account_name"
    },
    "results": "asset[]"
  },
  "get_sourcerate": {
    "brief": "Return net rate and cpu rate",
    "params": {
      "account_name": {
        "type": "name",
        "description": "Account name to get sourcerate"
      }
    },
    "results": {
      "net_rate": "uint64",
      "cpu_rate": "uint64"
    },
    "example": {
      "func_parameter": {
        "account_name": "account"
      }
    }
  },
  "get_currency_balance": {
    "params": {
      "code": {
        "type": "name",
        "description": "account which deployed the contract"
      },
      "account": {
        "type": "name",
        "description": "account to get balance of"
      },
      "symbol": {
        "type": "optional<string>",
        "description": "symbol to query"
      }
    },
    "results": "asset[]",
    "example": {
      "func_parameter": {
        "code": "account",
        "account": "account",
        "symbol": "UGAS"
      }
    }
  },
  "get_currency_stats": {
    "params": {
      "code": {
        "type": "name",
        "description": "account which deployed the contract"
      },
      "symbol": {
        "type": "string",
        "description": "currency symbol to get the stats for"
      }
    },
    "results": {
      "supply": "asset",
      "max_supply": "asset",
      "issuer": "account_name"
    },
    "example": {
      "func_parameter": {
        "code": "account",
        "symbol": "UGAS"
      }
    }
  },
  "get_producer_schedule": {
    "brief": "",
    "params": {},
    "results": {
      "vector": "active",
      "vector": "pending",
      "vector": "proposed"
    }
  },
  "get_scheduled_transactions": {
    "brief": "",
    "params": {
      "json": {
        "type": "bool",
        "description": "Provide true or false",
        "default": false
      },
      "lower_bound": {
        "type": "string",
        "description": "timestamp OR transaction ID"
      },
      "limit": {
        "type": "uint32",
        "description": "",
        "default": "50"
      }
    },
    "results": {
      "vector": "transactions",
      "more": {
        "type": "string",
        "doc": "fill lower_bound with this to fetch next set of transactions"
      }
    },
    "example": {
      "func_parameter": {
        "json": false,
        "lower_bound": "2a57d0f636625abc9f63656e3b8ada8b8b7a4fdf7a7663e4db27bc88be730b51",
        "limit": "50"
      }
    }
  },
  "get_chain_info": {
    "brief": "Return general network information.",
    "params": null,
    "results": {
      "server_version": "string",
      "head_block_num": "uint32",
      "last_irreversible_block_num": "uint32",
      "last_irreversible_block_id": "block_id",
      "head_block_id": "block_id",
      "head_block_time": "time_point_sec",
      "head_block_producer": "account_name",
      "virtual_block_cpu_limit": "uint64",
      "virtual_block_net_limit": "uint64",
      "block_cpu_limit": "uint64",
      "block_net_limit": "uint64"
    }
  },
  "get_block_info": {
    "brief": "Fetch a block from the blockchain.",
    "params": {
      "block_num_or_id": {
        "type": "string",
        "description": "Provide a block number or a block id"
      }
    },
    "results": "variant",
    "errors": {
      "unknown block": null
    },
    "example": {
      "func_parameter": {
        "block_id": "0000000280155952392ddaa5c4fb6611e74e3c93f61852c50f67f47c9c8b90ba"
      }
    }
  },
  "get_block_header_state": {
    "brief": "Fetch the minimum state necessary to validate transaction headers.",
    "params": {
      "block_num_or_id": {
        "type": "string",
        "description": "Provide a block number or a block id"
      }
    },
    "results": "string",
    "errors": {
      "block_id_type_exception": "Invalid block ID",
      "unknown_block_exception": "Could not find reversible block"
    },
    "example": {
      "func_parameter": {
        "block_id": "0000000280155952392ddaa5c4fb6611e74e3c93f61852c50f67f47c9c8b90ba"
      }
    }
  },
  "get_account_info": {
    "brief": "Fetch a blockchain account",
    "params": {
      "account_name": {
        "type": "name",
        "description": "Provide an account name"
      }
    },
    "results": {
      "account_name": "name",
      "privileged": "bool",
      "last_code_update": "time_point",
      "created": "time_point",
      "ram_quota": "int64",
      "net_weight": "int64",
      "cpu_weight": "int64",
      "net_limit": "int64",
      "cpu_limit": "int64",
      "ram_usage": "int64",
      "permissions": "vector<permission>",
      "total_resources": "variant",
      "delegated_bandwidth": "variant",
      "voter_info": "variant"
    },
    "example": {
      "func_parameter": {
        "account_name": "account"
      }
    }
  },
  "get_contract": {
    "brief": "Fetch smart contract code",
    "params": {
      "account_name": {
        "type": "name",
        "description": "Provide a smart contract account name"
      },
      "code_as_wasm": {
        "type": "bool",
        "description": "was deprecated"
      }
    },
    "results": {
      "account_name": "name",
      "wast": "string",
      "wasm": "string",
      "code_hash": "sha256",
      "abi": "optional<abi_def>"
    },
    "example": {
      "func_parameter": {
        "account_name": "account"
      }
    }
  },
  "get_abi": {
    "params": {
      "account_name": {
        "type": "name",
        "description": "name of account to retrieve ABI for"
      }
    },
    "results": {
      "account_name": "name",
      "abi": "abi_def?"
    },
    "example": {
      "func_parameter": {
        "account_name": "account"
      }
    }
  },
  "get_raw_code_and_abi": {
    "params": {
      "account_name": {
        "type": "name",
        "description": "Account name to get code and abi for"
      }
    },
    "results": {
      "account_name": "name",
      "wasm": "bytes",
      "abi": "abi_def?"
    },
    "example": {
      "func_parameter": {
        "account_name": "account"
      }
    }
  },
  "get_table_records": {
    "brief": "Fetch smart contract data from an account.",
    "params": {
      "json": {
        "type": "bool",
        "description": "Provide true or false",
        "default": false
      },
      "code": {
        "type": "name",
        "description": "Provide the smart contract name"
      },
      "scope": {
        "type": "string",
        "description": "Provide the account name"
      },
      "table": {
        "type": "name",
        "description": "Provide the table name"
      },
      "table_key": "string",
      "lower_bound": {
        "type": "string",
        "description": "",
        "default": "0"
      },
      "upper_bound": {
        "type": "string",
        "description": "",
        "default": "-1"
      },
      "limit": {
        "type": "uint32",
        "description": "",
        "default": "10"
      },
      "key_type": {
        "type": "string",
        "description": "The key type of --index,<br/> primary only supports (i64),<br/> all others support (i64, i128, i256, float64, float128).<br/> Special type 'name' indicates an account name."
      },
      "index_position": {
        "type": "string",
        "description": "1 - primary (first),<br/> 2 - secondary index (in order defined by multi_index),<br/> 3 - third index, etc"
      }
    },
    "results": {
      "rows": {
        "type": "vector",
        "doc": "One row per item, either encoded as hex String or JSON object"
      },
      "more": {
        "type": "bool",
        "doc": "True if last element in data is not the end and sizeof data() < limit"
      }
    },
    "example": {
      "func_parameter": {
        "json": false,
        "code": "account1",
        "scope": "account2",
        "table": "table",
        "table_key": "",
        "lower_bound": "0",
        "upper_bound": "-1",
        "limit": "10",
        "key_type": "i64",
        "index_position": ""
      }
    }
  },
  "get_table_by_scope": {
    "brief": "Fetch smart contract data from an account.",
    "params": {
      "code": {
        "type": "name",
        "description": "Provide the smart contract name"
      },
      "table": {
        "type": "name",
        "description": "Provide the table name"
      },
      "lower_bound": {
        "type": "string",
        "description": "",
        "default": "0"
      },
      "upper_bound": {
        "type": "string",
        "description": "",
        "default": "-1"
      },
      "limit": {
        "type": "uint32",
        "description": "",
        "default": "10"
      }
    },
    "results": {
      "rows": {
        "type": "vector",
        "doc": "One row per item, either encoded as hex String or JSON object"
      },
      "more": {
        "type": "bool",
        "doc": "True if last element in data is not the end and sizeof data() < limit"
      }
    },
    "example": {
      "func_parameter": {
        "code": "account1",
        "table": "table",
        "lower_bound": "0",
        "upper_bound": "-1",
        "limit": "10"
      }
    }
  },
  "abi_json2bin": {
    "brief": "Manually serialize json into binary hex.  The binayargs is usually stored in Action.data.",
    "params": {
      "code": {
        "type": "name",
        "description": "Provide the account name."
      },
      "action": {
        "type": "name",
        "description": "Provide the action arguments"
      },
      "args": {
        "type": "bytes",
        "description": "Provide the json arguments"
      }
    },
    "results": {
      "binargs": "bytes"
    },
    "example": {
      "func_parameter": {
        "code": "account1",
        "action": "account2",
        "args": {
          "from": "initb",
          "to": "initc",
          "quantity": 1000
        }
      }
    }
  },
  "abi_bin2json": {
    "brief": "Convert bin hex back into Abi json definition.",
    "params": {
      "code": {
        "type": "name",
        "description": "Provide the smart contract account name"
      },
      "action": {
        "type": "name",
        "description": "Provide the action name"
      },
      "binargs": {
        "type": "bytes",
        "description": "Provide the binary arguments"
      }
    },
    "results": {
      "args": "bytes",
      "required_scope": "name[]",
      "required_auth": "name[]"
    },
    "example": {
      "func_parameter": {
        "code": "account1",
        "action": "account2",
        "binargs": "000000008093dd74000000000094dd74e803000000000000"
      }
    }
  },
  "get_required_keys": {
    "params": {
      "transaction": {
        "type": "transaction",
        "description": "Provide the transaction object"
      },
      "available_keys": {
        "type": "Array",
        "description": "Provide the available keys"
      }
    },
    "results": "Set[public_key]",
    "example": {
      "func_parameter": {
        "transaction": {
          "ref_block_num": "100",
          "ref_block_prefix": "137469861",
          "expiration": "2017-09-25T06:28:49",
          "scope": [
            "initb",
            "initc"
          ],
          "actions": [
            {
              "code": "currency",
              "type": "transfer",
              "recipients": [
                "initb",
                "initc"
              ],
              "authorization": [
                {
                  "account": "initb",
                  "permission": "active"
                }
              ],
              "data": "000000000041934b000000008041934be803000000000000"
            }
          ],
          "signatures": [],
          "authorizations": []
        },
        "available_keys": [
          "EOS4toFS3YXEQCkuuw1aqDLrtHim86Gz9u3hBdcBw5KNPZcursVHq",
          "EOS7d9A3uLe6As66jzN8j44TXJUqJSK3bFjjEEqR4oTvNAB3iM9SA",
          "EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV"
        ]
      }
    }
  },
  "push_block": {
    "brief": "Append a block to the chain database.",
    "params": {
      "block": "signed_block"
    },
    "results": null
  },
  "push_tx": {
    "brief": "Attempts to push the transaction into the pending queue.",
    "params": {
      "signed_transaction": {
        "type": "signed_transaction",
        "description": "Provide the authorizations for the transaction"
      }
    },
    "results": {
      "transaction_id": "fixed_bytes32",
      "processed": "bytes"
    }
  },
  "push_txs": {
    "brief": "Attempts to push transactions into the pending queue.",
    "params": {
      "signed_transaction[]": {
        "type": "signed_transaction",
        "description": "Provide the authorizations for the transaction"
      }
    },
    "results": "vector[push_transaction.results]"
  },
  "register_event": {
    "brief": "subscribe to ultrain chain event.",
    "params": {
      "account": {
        "type": "name",
        "description": "Provide the action name"
      },
      "post_url": "string"
    },
    "results": "",
    "example": {
      "func_parameter": {
        "account": "name",
        "post_url": "http://10.10.10.114:3002"
      }
    }
  },
  "unregister_event": {
    "brief": "unsubscribe to ultrain chain event.",
    "params": {
      "account": {
        "type": "name",
        "description": "Provide the action name"
      },
      "post_url": "string"
    },
    "results": "",
    "example": {
      "func_parameter": {
        "account": "name",
        "post_url": "http://10.10.10.114:3002"
      }
    }
  }
}